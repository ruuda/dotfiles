[user]
  name = Ruud van Asseldonk
  email = dev@veniogames.com
  signingkey = 0599697D

[alias]
  # When checking something out, if that causes submodules to be at a different
  # version than currently checked out, also check out the right commit in the
  # submodule. This --recurse-submodules is not always desirable for all Git
  # commands, so rather than setting the global option, we make it apply only to
  # checkout here.
  checkout = checkout --recurse-submodules

  # The format string is the same as --decorate=short, but with the branch/tag
  # markers after the commit message instead of in front of it.
  hist = log   --oneline --format='%C(auto)%h %s%d'
  lg = log -10 --oneline --format='%C(auto)%h %s%d'
  st = status -s
  pl = pull --ff-only --no-rebase

  # Show branches, upstream, and difference with upstream, nicely aligned.
  # Sort from older to newer.
  br = !git branch --sort=committerdate --format '\
%(HEAD)%00\
%(objectname:short=7)%00\
%(refname)%00%(refname:short)%00\
%(upstream)%00%(upstream:short)%00%(upstream:track)' $1 | $HOME/dotfiles/git-br.py

  # Same as the "br" command above, but then pipe everything into fzf, configure
  # fzf to filter on the branch name (field 3), print the branch name on exit
  # (the enter rebind), and then put all of *that* into a "git checkout" to
  # switch to that branch.
  b = !git checkout $(\
git branch --sort=committerdate --format '\
%(HEAD)%00\
%(objectname:short=7)%00\
%(refname)%00%(refname:short)%00\
%(upstream)%00%(upstream:short)%00%(upstream:track)' $1 |\
$HOME/dotfiles/git-br.py |\
fzf \
--ansi --no-sort --tac \
--delimiter '[‚óè ]+' \
--nth 3 \
--preview 'git log --stat --color=always -5 {2}' \
--bind 'enter:execute(echo {3})+abort')

  # When used after a pull, shows all new commits from old to new.
  # Optionally takes the branch name.
  whatsnew = !git hist --no-merges --reverse $1@{1}..$1@{0}

  # Delete all branches that have been merged into master.
  gc-branches = !git branch --merged master | egrep -v master | xargs git branch -d

  # Set upstream to master.
  upmaster = branch --set-upstream-to=master

  # Force-push with lease.
  pushf = push --force-with-lease

  # Glone: Github-clone. Needs the function wrapper, otherwise the arguments get
  # passed twice somehow.
  glone = "!glone() { git clone https://github.com/$1; }; glone"

[status]
  # Abbreviate directories of untracked files. I briefly set this to "all", but
  # that is annoying for cache directories that I haven't .gitignored, the
  # default is better after all. I am mainly leaving this here as a reminder.
  showUntrackedFiles = normal

[gui]
  fontdiff = -family Consolas -size 10 -weight normal -slant roman -underline 0 -overstrike 0
  diffcontext = 4
  encoding = utf-8

[branch]
  # Set the upstream to the current branch when using `git checkout -b`, in
  # order to keep track of where we branched from, to ease rebases. Especially
  # useful when many branches branched from one another and some of them have
  # been rebased in the mean time.
  autoSetupMerge = always
  
[push]
  # Push only the current branch.
  default = simple

[transfer]
  # Verify new objects to catch errors early. This is to prevent bad objects
  # from spreading further.
  fsckObjects = true

[submodule]
  # Enable --recurse-submodules by default, which in particular ensures that
  # when you check out a commit in a repository that has submodules, it also
  # checks out the right commit in the submodules. Without this, you have to run
  # "git submodule update" manually, or you'd end up with a dirty working
  # directory.
  # Update: Or don't, because it also makes "git fetch" and "git grep" recurse
  # into submodules, and especially for the latter this is annoying. Instead,
  # I'll add a "checkout" alias to recurse by default.
  recurse = false

[tag]
  # Sort the output of git tag in version order, so you get v1, v2, ..., v9, v10
  # instead of v1, v10, v2, ..., v9.
  sort = version:refname

[diff]
  # Try harder to produce a clean diff. The histogram algorithm is an extension
  # of the patience algorithm that happens to be faster than patience and faster
  # than the default diff algorithm too. (Source: commit 8555123 of Git.)
  algorithm = histogram

  # Try to break up diffs at blank lines, so you don't get those brackets
  # floating away.
  indentHeuristic = true

  # Remove a/ and b/ on filenames in diffs. There is already a +++ and --- in
  # front, so it adds nothing. Edit: Actually, this interferes with `git
  # format-patch` and creates unapplicable patches, disable it after all.
  noprefix = false

[merge]
  # Show the common ancestor for merge conflicts (diff3), but do remove any
  # shared prefixes and suffixes between the two sides (zdiff3).
  conflictstyle = diff3
  tool = gvimdiff

[rebase]
  # When doing an interactive rebase, automatically reorder and set the right
  # actions for commits that were committed with --fixup or --squash.
  autosquash = true

[rerere]
  # Remember conflict resolutions. If the same conflict appears again,
  # use the previous resolution.
  enabled = true

  # If rerere successfully resolved a conflict, stage the conflicted
  # file automatically.
  autoupdate = true

[core]
  # Enable a global gitignore (mine ignores Vim swap files).
  excludesfile = ~/.gitignore

[init]
  defaultBranch = master

[tig]
  # Configure the Tig curses UI to look a bit nicer.
  line-graphics = utf-8
  commit-order = topo
  mailmap = true
  main-view-author = email-user,width=10
  main-view-commit-title = graph=v2,refs=true
  main-view-date = display=relative-compact
  reference-format = <tag> (branch) hide:remote

[maintenance]
  repo = /home/ruud/repos/nixpkgs
  repo = /home/ruud/repos/linux
